package template

const HTTP = `
// Code generated by github.com/vaynedu/protoc-gen-myhttp. DO NOT EDIT.
// Code generated by github.com/vaynedu/protoc-gen-myhttp. DO NOT EDIT.
// Code generated by github.com/vaynedu/protoc-gen-myhttp. DO NOT EDIT.


package {{.PackageName}}

import (
	"context"
	"encoding/json"
	"net/http"
    "github.com/gin-gonic/gin"
)

{{range $service := .Services}}
type {{$service.Name}}Service interface {
{{range $method := .Methods}}
	{{$method.Name}}(ctx context.Context, req *{{$method.RequestType}}) (resp *{{$method.ResponseType}}, err error){{end}}
}

type {{$service.Name}} struct {
	svc {{$service.Name}}Service
}

func Register{{$service.Name}}HTTPServeMux(mux *http.ServeMux, svc {{$service.Name}}Service) {
	s := {{$service.Name}}{
		svc: svc,
	}
	{{range $method := .Methods}}
	mux.HandleFunc("/{{$method.Name}}", s.{{$method.Name}}){{end}}
}

{{range $method := .Methods}}
func (s *{{$service.Name}}) {{$method.Name}}(rw http.ResponseWriter, r *http.Request) {
	_ = r.ParseForm()
	var req {{$method.RequestType}}
	switch r.Method {
	case http.MethodPost:
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			rw.WriteHeader(http.StatusBadRequest)
			return
		}
	default:
		rw.WriteHeader(http.StatusMethodNotAllowed)
		return
	}
	resp, err := s.svc.{{$method.Name}}(r.Context(), &req)
	if err != nil {
		rw.WriteHeader(http.StatusInternalServerError)
		return
	}
	if err := json.NewEncoder(rw).Encode(resp); err != nil {
		rw.WriteHeader(http.StatusInternalServerError)
		return
	}
}
{{end}}

{{end}}
`
