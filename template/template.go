package template

const HTTP = `
// Code generated by github.com/vaynedu/protoc-gen-myhttp. DO NOT EDIT.
// Code generated by github.com/vaynedu/protoc-gen-myhttp. DO NOT EDIT.
// Code generated by github.com/vaynedu/protoc-gen-myhttp. DO NOT EDIT.

package {{.PackageName}}

import (
	"context"
	"fmt"
	"github.com/gin-gonic/gin"
)

{{range $service := .Services}}
type {{$service.Name}}Service interface {
{{range $method := .Methods}}
	{{$method.Name}}(ctx context.Context, req *{{$method.RequestType}}) (resp *{{$method.ResponseType}}, err error){{end}}
}

type {{$service.Name}} struct {
	svc {{$service.Name}}Service
}

func Register{{$service.Name}}GinRouter(router *gin.Engine, svc {{$service.Name}}Service) {
	s := {{$service.Name}}{
		svc: svc,
	}
	{{range $method := .Methods}}
	{{if eq $method.HTTPMethod "POST"}}
	router.POST("{{$method.HTTPPath}}", s.{{$method.Name}})
	{{else if eq $method.HTTPMethod "GET"}}
	router.GET("{{$method.HTTPPath}}", s.{{$method.Name}})
	{{end}}
	{{end}}
}

{{range $method := .Methods}}
func (s *{{$service.Name}}) {{$method.Name}}(c *gin.Context) {
	var req {{$method.RequestType}}
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	resp, err := s.svc.{{$method.Name}}(c.Request.Context(), &req)
	if err != nil {
		c.JSON(500, gin.H{"error": err.Error()})
		return
	}
	c.JSON(200, resp)
}
{{end}}


// 新增未实现的服务结构体
type Unimplemented{{$service.Name}}Service struct{}

// 为每个方法提供错误实现
{{range $method := .Methods}}
func (u *Unimplemented{{$service.Name}}Service) {{$method.Name}}(ctx context.Context, req *{{$method.RequestType}}) (resp *{{$method.ResponseType}}, err error) {
	return nil, fmt.Errorf("{{$service.Name}}Service.{{$method.Name}} 方法未实现")
}
{{end}}

{{end}}
`
