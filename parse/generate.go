package parse

import (
	"bytes"
	"fmt"
	"text/template"

	myhttp_temlate "github.com/vaynedu/protoc-gen-myhttp/template"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"

	// 由于原包无法导入，尝试使用新的官方包路径
	// 修改为正确的导入路径
	annotations "google.golang.org/genproto/googleapis/api/annotations"
)

func GenerateFile(gen *protogen.Plugin, file *protogen.File) error {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_myhttp.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	// g.P("// Code generated by github.com/vaynedu/protoc-gen-myhttp. DO NOT EDIT.")

	return NewFile(g, file).Generate()
}

type File struct {
	gen *protogen.GeneratedFile
	FileDescription
}

// FileDescription 描述了一个解析过后的proto文件的信息
// 为我们后边的代码生成做准备
type FileDescription struct {
	// PackageName 代表我们生成后的example.pb.go文件的包名
	PackageName string

	// Services 代表我们生成后的example.pb.go文件中的所有服务
	// 我们在proto文件中写的每个server都会转化为一个 Service 实体
	Services []*Service
}

type Service struct {
	// Service 的名称
	Name string

	// Service 里具有哪些方法
	Methods []*Method
}

type Method struct {
	// 方法名称
	Name string
	// 请求类型
	RequestType string
	// 响应类型
	ResponseType string
	// 新增字段，保存 HTTP 路径
	HTTPPath string
	// 新增字段，保存 HTTP 方法
	HTTPMethod string
}

func NewFile(gen *protogen.GeneratedFile, protoFile *protogen.File) *File {
	f := &File{
		gen: gen,
	}

	f.PackageName = string(protoFile.GoPackageName)

	for _, s := range protoFile.Services {
		f.ParseService(s)
	}

	return f
}

func (f *File) ParseService(protoSvc *protogen.Service) {
	s := &Service{
		Name:    protoSvc.GoName,
		Methods: make([]*Method, 0, len(protoSvc.Methods)),
	}

	for _, m := range protoSvc.Methods {
		s.Methods = append(s.Methods, f.ParseMethod(m))
	}

	f.FileDescription.Services = append(f.FileDescription.Services, s)
}

func (f *File) ParseMethod(m *protogen.Method) *Method {
	httpRule := proto.GetExtension(m.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
	httpPath := ""
	httpMethod := ""
	if httpRule != nil {
		switch {
		case httpRule.GetPost() != "":
			httpPath = httpRule.GetPost()
			httpMethod = "POST"
		case httpRule.GetGet() != "":
			httpPath = httpRule.GetGet()
			httpMethod = "GET"
		// 可以根据需要添加其他 HTTP 方法的处理
		}
	}

	return &Method{
		Name:         m.GoName,
		RequestType:  m.Input.GoIdent.GoName,
		ResponseType: m.Output.GoIdent.GoName,
		HTTPPath:     httpPath,
		HTTPMethod:   httpMethod,
	}
}

func (f *File) Generate() error {
	tmpl, err := template.New("myhttp_template").Parse(myhttp_temlate.HTTP)
	if err != nil {
		return fmt.Errorf("failed to parse myhttp template: %w", err)
	}
	buf := &bytes.Buffer{}
	if err := tmpl.Execute(buf, f.FileDescription); err != nil {
		return fmt.Errorf("failed to execute myhttp template: %w", err)
	}
	f.gen.P(buf.String())
	return nil
}

// ... existing code ...
